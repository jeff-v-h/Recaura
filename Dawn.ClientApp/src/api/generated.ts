/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.3.0.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming



export interface IGetCaseFileVm {
    id: number;
    patientId: number;
    name: string;
    created: string;
    consultations: IConsultationVm[];
}

export interface IConsultationVm {
    id: number;
    date: string;
    number: number;
    practitionerId: number;
}

export interface IGetConsultationVm {
    id: number;
    caseFileId: number;
    date: string;
    number: number;
    practitioner: IPractitionerVm;
    subjectiveAssessment: ISubjectiveAssessmentVm;
    objectiveAssessment: IObjectiveAssessmentVm;
    treatments: ITreatmentVm[];
    plans: IForwardPlanVm[];
}

export interface IPractitionerVm {
    id: number;
    firstName: string;
    lastName: string;
    jobLevel: string;
}

export interface ISubjectiveAssessmentVm {
    id: number;
    moi: string;
    currentHistory: string;
    bodyChart: string;
    aggravatingFactors: string;
    easingFactors: string;
    vas: number | null;
    pastHistory: string;
    socialHistory: string;
    imaging: string;
    generalHealth: string;
}

export interface IObjectiveAssessmentVm {
    id: number;
    observation: string;
    active: IActiveTestVm[];
    passive: IPassiveTestVm[];
    resistedIsometric: IResistedIsometricTestVm[];
    functionalTests: IFunctionalTestVm[];
    neurologicalTests: INeurologicalTestVm[];
    specialTests: ISpecialTestVm[];
    palpation: string;
    additional: string;
}

export interface IActiveTestVm {
    id: number;
    name: string;
    comment: string;
    value: number;
}

export interface IPassiveTestVm {
    id: number;
    name: string;
    comment: string;
    value: number;
}

export interface IResistedIsometricTestVm {
    id: number;
    name: string;
    comment: string;
    value: number;
}

export interface IFunctionalTestVm {
    id: number;
    name: string;
    comment: string;
    result: string;
}

export interface INeurologicalTestVm {
    id: number;
    name: string;
    comment: string;
    result: DiagnosticResult;
}

/** 0 = Negative 1 = Positive 2 = Inconclusive */
export enum DiagnosticResult {
    Negative = 0,
    Positive = 1,
    Inconclusive = 2,
}

export interface ISpecialTestVm {
    id: number;
    name: string;
    comment: string;
    result: DiagnosticResult;
}

export interface ITreatmentVm {
    id: number;
    name: string;
    comment: string;
    quantity: string;
}

export interface IForwardPlanVm {
    id: number;
    name: string;
    comment: string;
}

export interface IGetPatientsVm {
    patients: IPatientVm[];
}

export interface IPatientVm {
    id: number;
    firstName: string;
    lastName: string;
    dob: string;
}

export interface IPersonVm {
    id: number;
    honorific: Honorific;
    firstName: string;
    lastName: string;
    dob: string;
    email: string;
    countryCode: string;
    homePhone: string;
    mobilePhone: string;
    gender: Gender;
}

export interface IGetPatientVm extends IPersonVm {
    occupation: string;
    caseFiles: ICaseFileVm[];
}

export interface ICaseFileVm {
    id: number;
    name: string;
}

/** 0 = Mr 1 = Mrs 2 = Miss 3 = Ms 4 = Master 5 = Mx 6 = M 7 = Sir 8 = Madam 9 = Dr 10 = Prof */
export enum Honorific {
    Mr = 0,
    Mrs = 1,
    Miss = 2,
    Ms = 3,
    Master = 4,
    Mx = 5,
    M = 6,
    Sir = 7,
    Madam = 8,
    Dr = 9,
    Prof = 10,
}

/** 0 = PreferNotToSay 1 = Male 2 = Female 3 = Other */
export enum Gender {
    PreferNotToSay = 0,
    Male = 1,
    Female = 2,
    Other = 3,
}

export interface IGetSubjectiveAssessmentVm extends ISubjectiveAssessmentVm {
}